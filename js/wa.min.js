(function($) {
    $.fn.fittedGrid = function() {
        this.each(function(){
            var container = $(this);

            var fitToParent = $(this).hasClass('fit-to-parent');
            var parentVw = (fitToParent) ? $(this).width() / window.innerWidth : 1.0;

            var waCell = function(cell) {
                var self = this;
                this.ele = cell;
                this.unveiled = false;

                var cellType = cell.data('cell-type');
                var csize = cell.data('cell-size').split(',');

                const colorArr = [
                    'rgb(174, 174, 174)',
                    'rgb(180, 176, 180)',
                    'rgb(76, 55, 100)',
                    'rgb(31, 27, 26)',
                    'rgb(111, 95, 82)',
                    'rgb(231, 116, 106)',
                    'rgb(166, 156, 157)',
                    'rgb(123, 119, 95)',
                    'rgb(241, 234, 227)',
                    'rgb(254, 240, 239)',
                    'rgb(110, 135, 148)',
                    'rgb(204, 160, 150)',
                    'rgb(211, 215, 175)',
                    'rgb(233, 233, 233)',
                    'rgb(183, 184, 156)',
                    'rgb(139, 145, 145)',
                    'rgb(193, 160, 87)',
                    'rgb(254, 238, 239)',
                    'rgb(209, 165, 119)',
                    'rgb(238, 212, 164)',
                ]
                const randomIndex = Math.floor(Math.random()*colorArr.length);
                cell.css({'background-color':`${colorArr[randomIndex]}`})


                this.col = 0;
                this.row = 0;
                this.mobile_col = 0;
                this.mobile_row = 0;

                this.cols = parseInt(csize[0]);
                this.rows = parseInt(csize[1]);
                this.mobile_cols = parseInt(csize[0]);
                this.mobile_rows = parseInt(csize[1]);

                this.width = 0;
                this.mobile_width = 0;
                this.height = 0;
                this.mobile_height = 0;

                this.top = 0;
                this.mobile_top = 0;
                this.left = 0;
                this.mobile_left = 0;

                this.apply = function(animated, prefix) {
                    var l = this[prefix+'left'];
                    var w = this[prefix+'width'];

                    if (l==0) {
                        cell.addClass('flush-left');
                    } else {
                        cell.removeClass('flush-left');
                    }

                    if (l+w == 100) {
                        cell.addClass('flush-right');
                    } else {
                        cell.removeClass('flush-right');
                    }

                    var cssProps = {
                        "left": (l*parentVw)+'vw',
                        "top": this[prefix+'top']+'vw',
                        "width": (w*parentVw)+'vw',
                        "height": this[prefix+'height']+'vw'
                    };

                    console.log(cssProps);

                    if (animated) {
                        cell.animate(cssProps, 500);
                    } else {
                        cell.css(cssProps);
                    }
                };

                this.unveil = function() {
                    if (cell.find('.cell-bg').length == 1) {
                        return;
                    }

                    if ((cellType == 'image') && !self.unveiled) {
                        var img = cell.data('background');
                        self.unveiled = true;
                        if (img) {

                            var cellBg = $("<div class='cell-bg'></div>");
                            cellBg.css({opacity: 0});
                            cell.prepend(cellBg);

                            var image = new Image();
                            image.onload = function() {
                                cellBg.css({"background-image": "url("+img+")"});
                                setTimeout(function(){
                                    cellBg.css({opacity: 1});
                                }, 100);
                            };
                            image.src = img;
                        }

                        cell.removeClass('out-view');
                    } else if ((cellType == 'video')  && !self.unveiled) {
                        self.unveiled = true;
                        var video = cell.data('background-video');
                        if (video) {
                            var cellBg = $("<div class='cell-bg'></div>");
                            cellBg.css({opacity: 0});
                            var videoEle = $("<video autoplay playsinline muted loop='true'><source type='video/mp4' src='"+video+"'></video>");
                            videoEle[0].onplay = function() {
                                // console.log('onplay');
                                setTimeout(function(){
                                    cellBg.css({opacity: 1});
                                }, 100);
                            };
                            cellBg.append(videoEle);
                            cell.prepend(cellBg);
                        }

                        cell.removeClass('out-view');
                    } else if (!self.unveiled) {
                        self.unveiled = true;
                        cell.removeClass('out-view');
                    }
                };
            };

            var waGrid = function(cellWidthSize, cellHeightSize, cells, propPrefix) {
                var self = this;

                var grid = [];
                var maxCols = 100 / cellWidthSize;
                for(var x = 0; x<maxCols; x++) {
                    grid[x] = [];
                    for(var y=0; y<200; y++) {
                        grid[x][y] = false;
                    }
                }

                this.print = function() {
                    var output = '';
                    for (var y = 0; y<200; y++) {
                        var found = false;
                        for(var x = 0; x<maxCols; x++) {
                            if (grid[x][y] == true) {
                                found = true;
                            }

                            output += (grid[x][y] == true) ? '0' : '-';
                        }

                        output += "\n";

                        if (!found){
                            break;
                        }
                    }
                };

                var lastFilledY = -1;
                var findCell = function(width, height) {
                    var y = lastFilledY + 1;
                    var x = 0;

                    var filledRow = true;
                    while(true) {
                        if (grid[x][y]==true) {
                            x++;
                        } else {
                            filledRow = false;
                            if (x+width<=maxCols) {
                                var foundIt = true;
                                for(var y2=y; y2<y+height; y2++) {
                                    for(var x2=x; x2<x+width; x2++) {
                                        if (grid[x2][y2] == true) {
                                            foundIt = false;
                                            break;
                                        }
                                    }

                                    if (!foundIt) {
                                        break;
                                    }
                                }

                                if (foundIt) {
                                    for(var x1 = x; x1 < x+width; x1++) {
                                        for(var y1 = y; y1 < y+height; y1++) {
                                            grid[x1][y1] = true;
                                        }
                                    }

                                    return [x,y];
                                } else {
                                    x = 0;
                                    y++;
                                }

                            } else {
                                x = 0;
                                y++;
                            }
                        }

                        if (x == maxCols) {
                            if (filledRow) {
                                lastFilledY = y;
                            }

                            x = 0;
                            y++;
                        }
                    }
                };

                $.each(cells, function(index, cell){
                    var c = cell[propPrefix+'cols'];
                    var r = cell[propPrefix+'rows'];

                    if (c > maxCols) {
                        var newC = Math.max(1,Math.min(maxCols, c/maxCols));
                        var newR = Math.max(1, r * (newC/c));

                        cell[propPrefix+'cols'] = newC;
                        cell[propPrefix+'rows'] = newR;

                        c = newC;
                        r = newR;
                    }

                    if ((propPrefix == "mobile_") && cell.ele.hasClass('text')) {
                        r = 1;
                    }

                    var loc = findCell(c, r);
                    cell[propPrefix+'col'] = loc[0];
                    cell[propPrefix+'row'] = loc[1];
                    cell[propPrefix+'left'] = loc[0] * cellWidthSize;
                    cell[propPrefix+'top'] = loc[1] * cellHeightSize;
                    cell[propPrefix+'width'] = cellWidthSize * c;
                    cell[propPrefix+'height'] = cellHeightSize * r;
                });

                this.apply = function(animated) {
                    var mh = 0;
                    $(cells).each(function(index, cell){
                        var h= cell['rows'];
                        var t= cell[propPrefix + 'row'];

                        if (h+t > mh) {
                            mh = h+t;
                        }

                        cell.apply(animated, propPrefix);
                    });

                    return mh * cellHeightSize;
                };

            };

            var allCells = [];
            $(this).find('li').each(function(){
                allCells.push(new waCell($(this)));
            });

            var bigGrid = new waGrid(25,25, allCells, '');

            var mobileGrid = new waGrid(50,50, allCells, 'mobile_');

            var currentGrid = bigGrid;

            var ch = 0;
            if (window.innerWidth<=1024) {
                ch = mobileGrid.apply(false);
                currentGrid = mobileGrid;
            } else {
                ch = bigGrid.apply(false);
            }

            if (ch>0) {
                container.css({"height": ch+"vw"});
            }

            var $w = $(window);

            var unveil = function() {
                var wt = $w.scrollTop();
                var wb = wt + parseInt(window.innerHeight);

                $.each(allCells, function(index, cell){
                    if (cell.unveiled) {
                        return;
                    }

                    var et = cell.ele.offset().top, eb = et + cell.ele.height();

                    if (eb >= wt - 32 && et <= wb + 32) {
                        cell.unveil();
                    }
                });
            };

            var didResize = false;
            var didScroll = false;
            var checkResize = function() {
                if (didResize) {
                    var iw = window.innerWidth;
                    var ch = 0;

                    if ((iw <= 1024) && (currentGrid != mobileGrid)) {
                        ch = mobileGrid.apply(true);
                        currentGrid = mobileGrid;
                    } else if ((iw > 1024) && (currentGrid != bigGrid)) {
                        ch = bigGrid.apply(true);
                        currentGrid = bigGrid;
                    }

                    if (ch>0) {
                        container.css({"height": ch+"vw"});
                    }
                }

                if (didResize || didScroll) {
                    unveil();
                }

                didResize = false;
                didScroll = false;

                requestAnimationFrame(checkResize);
            };

            window.addEventListener('resize', function(){
                didResize = true;
            });

            window.addEventListener('scroll', function(){
                didScroll = true;
            });

            unveil();

            requestAnimationFrame(checkResize);

            for(var i = 0; i<3; i++) {
                if (i < allCells.length) {
                    allCells[i].unveil();
                }
            }
        });
    };


})(jQuery);
(function($) {
    $.fn.jobsList = function() {
        this.each(function(){
            $(this).find('li').each(function(){
                var li = $(this);
                var expanded = false;
                var cta = li.find('.cta');
                cta.css({
                    opacity: 0
                });

                var innerD = li.find('.inner-description');
                innerD.css({
                    opacity: 0
                });

                var ogHeight = li.height();
                setTimeout(function(){
                    ogHeight = li.height();
                    li.css({
                        "height": "36px"
                    });
                },11);

                li.find('a.learn-more').on('click',function(e){
                    var a = $(this);
                    if (a.hasClass('learn-more')) {
                        a.removeClass('learn-more');
                        a.addClass('close');
                        a.text('Close');
                        li.animate({height: (innerD.height()+88)+'px'}, function(){
                            li.css({'height': ''});
                        });
                        setTimeout(function(){
                            cta.css({opacity: 1});
                            innerD.css({opacity: 1});
                        }, 125);
                    } else {
                        a.removeClass('close');
                        a.addClass('learn-more');
                        a.text('Learn More');
                        cta.css({opacity: 0});
                        innerD.css({opacity: 0});
                        setTimeout(function(){
                            li.animate({height: '36px'});
                        }, 125);
                    }

                    e.preventDefault();
                    return false;
                });
            });
        });
    };
})(jQuery);
(function($) {
    var twaSwappableSections = function() {
        var sections = {};
        var currentHash = document.location.hash.replace('#','');
        var current = (currentHash == '') ? 'home' : currentHash;

        $("section[data-identifier]").each(function(){
            var section = $(this);
            var identifier = section.data('identifier');

            if (!sections.hasOwnProperty(identifier)) {
                sections[identifier] = [];
            }

            sections[identifier].push(section);

            if (identifier!=current) {
                section.css({display: 'none'});
            }
        });

        $("a[data-identifier]").each(function(){
            if ($(this).data('identifier')==current) {
                $(this).addClass('current-menu-item');
            }
        });

        $("a[data-identifier]").on('click', function(e) {
            if($(this).data('identifier') === 'press') {
                $('header').addClass('dark');
            } else {
                $('header').removeClass('dark');
            }

            $("a[data-identifier]").each(function(){
                $(this).removeClass('current-menu-item');
            });

            $(this).addClass('current-menu-item');
            var aIdentifier = $(this).data('identifier');

            $.each(Object.keys(sections), function(index, key) {
                if (key == aIdentifier) {
                    $.each(sections[key], function(idx, obj) {
                        obj.css({display: ""});
                    });

                    history.pushState({"identifier": aIdentifier}, (aIdentifier == 'about') ? "About Us" : (aIdentifier == 'contact') ? "Contact Us" : (aIdentifier == 'careers') ? "Careers" : (aIdentifier == 'press') ? "Press" : "", "#"+aIdentifier);

                    $('html,body').animate({ scrollTop: 0 }, 'slow');
                } else {
                    $.each(sections[key], function(idx, obj) {
                        obj.css({display: "none"});
                    });
                }
            });

            e.preventDefault();
            return false;
        });
    };

    if (window.hasOwnProperty('canSwapSections')) {
        new twaSwappableSections();
    }
})(jQuery);
(function($) {
    console.log('start');

    $('.fitted-grid').fittedGrid();
    $('ul.jobs-list').jobsList();

    var windowScrolled = false;
    var headerScroll = function(){
        if (windowScrolled) {
            var header = $('body > header');

            var distanceY = window.pageYOffset || document.documentElement.scrollTop,
                shrinkOn = 138;

            if (distanceY > shrinkOn) {
                header.addClass("smaller");
            } else {
                if (header.hasClass("smaller")) {
                    header.removeClass("smaller");
                }
            }

            windowScrolled = false;
        }

        requestAnimationFrame(headerScroll);
    };

    requestAnimationFrame(headerScroll);

    window.addEventListener('scroll', function() {
        windowScrolled = true;
    });

    if (document.location.hash.replace('#','') === 'press') {
        $('header').addClass('dark');
    }

    $('#toggle-menu').click(function(e){
        e.preventDefault();
        $(this).toggleClass('open');
        $('body').toggleClass('nav-open');
    });

    $('.menu-items > ul > li > a').click(function (e) {
        $(this).siblings().removeClass('current-menu-item');
        $(this).addClass('current-menu-item');
        $('#toggle-menu').removeClass('open');
        $('body').removeClass('nav-open');
    })

    $('.collapse-wrapper li .collapse-trigger').click(function () {
        if (!$(this).parents('li').hasClass('open')) {
            if ($(window).width() < 992 || $(this).parents('.collapse-wrapper').hasClass('horizontal')) {
                $(this).parents('.collapse-wrapper').find('li.open').height($(this).parents('.collapse-wrapper').find('li.open h2').height());
                $(this).parents('li').height($(this).parents('li').find('.content').height() + $(this).parents('li').find('h2').height() + 28);
            }
            $(this).parents('li').siblings().removeClass('open');
            $(this).parents('li').addClass('open');
        } else if ($(this).parents('li').hasClass('open')) {
            $(this).parents('li.open').height($(this).parents('li.open').find('h2').height());
            $(this).parents('li').removeClass('open');
        }
    })

    if ($(window).width() < 992) {
        $('.collapse-wrapper').each(function () {
            $(this).find('li.open').height($(this).find('li.open .content').height() + $(this).find('li.open h2').height() + 28);
        })
        $('.collapse-wrapper li:not(.open)').each(function () {
            $(this).height($(this).find('h2').height());
        })
    } else {
        $('.collapse-wrapper.horizontal li.open').height($('.collapse-wrapper.horizontal li.open .content').height() + $('.collapse-wrapper.horizontal li.open h2').height() + 28)
        $('.collapse-wrapper.horizontal li:not(.open)').each(function () {
            $(this).height($(this).find('h2').height());
        })
    }

    $('a[data-identifier]').click(function () {
        if ($(window).width() < 992) {
            $('.collapse-wrapper').each(function () {
                $(this).find('li.open').height($(this).find('li.open .content').height() + $(this).find('li.open h2').height() + 28);
            })
            $('.collapse-wrapper li:not(.open)').each(function () {
                $(this).height($(this).find('h2').height());
            })
        } else {
            $('.collapse-wrapper.horizontal li.open').height($('.collapse-wrapper.horizontal li.open .content').height() + $('.collapse-wrapper.horizontal li.open h2').height() + 28)
            $('.collapse-wrapper.horizontal li:not(.open)').each(function () {
                $(this).height($(this).find('h2').height());
            })
        }
    })

    $(window).on('resize', function () {
        if ($(window).width() < 992) {
            $('.collapse-wrapper').each(function () {
                $(this).find('li.open').height($(this).find('li.open .content').height() + $(this).find('li.open h2').height() + 28);
            })
            $('.collapse-wrapper li:not(.open)').each(function () {
                $(this).height($(this).find('h2').height());
            })
        } else {
            $('.collapse-wrapper:not(.horizontal) li').removeAttr('style');
            $('.collapse-wrapper.horizontal li.open').height($('.collapse-wrapper.horizontal li.open .content').height() + $('.collapse-wrapper.horizontal li.open h2').height() + 28)
            $('.collapse-wrapper.horizontal li:not(.open)').each(function () {
                $(this).height($(this).find('h2').height());
            })
        }
    });
})(jQuery);